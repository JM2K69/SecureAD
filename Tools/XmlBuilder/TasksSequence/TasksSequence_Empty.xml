<?xml version="1.0" encoding="utf-8"?>
<Settings>
<!-- ##################################################################################################################################### -->
<!-- Revision: 2021/08/12 by loic.veirman@mssec.Fr                                                                                         -->
<!-- ##################################################################################################################################### -->
  <OrganizationalUnits>
    <!-- The section <ouTree> handle the base model for OU creation.                                                                       -->
    <!-- When calling the function [Set-OUTree], you need to add as parameter the "OU class" name of the tree structure you want to add.   -->
    <!-- This could also be used to manage new OU generation.                                                                              -->
    <ouTree>
		</ouTree>
	</OrganizationalUnits>
  
	<GroupPolicies>
    <!-- ################################################################################################################################# -->
    <!-- The <translation> section ease the script to translate identities from the lab domain to the integration domain.                  -->
    <!-- When a group policy contains a referal to an identity, such as a user or a group, you will have to match the originating ID to    -->
    <!-- its ID in the target domain. This could be achieve through a GPO migration table or a rewriting of a XML preference file.         -->
    <!--                                                                                                                                   -->
    <!-- Options Class are as below:                                                                                                       -->
    <!--  > When class object is USER...: the script will raise a call to new ID with Get-ADUser   and refer to the SID         attribute  -->
    <!--  > When class object is GROUP..: the script will raise a call to new ID with Get-ADGroup  and refer to the SID         attribute  -->
    <!--  > When class object is DOMAIN.: the script will raise a call to new ID with Get-ADDomain and refer to the NetBIOSName attribute  -->
    <!--  > When class object is UNCPATH: the script will raise a call to new ID with Get-ADGroup  and refer to the DNSRoot     attribute  -->
    <!-- ################################################################################################################################# -->
    <Translation>
    </Translation>

    <!-- ################################################################################################################################# -->
    <!-- The <WmiFilter> section allows the script to import MOF files to the Group Policy WMI Filters Container.                          -->
    <!-- Once a WMI Filter has been imported, it could be attached to a GPO through this script with te <GpoFilter> reference.             -->
    <!-- All MOF files to import must be located in .\Inputs\GroupPolicies\WmiFilters.                                                     -->
    <!-- Name refers to the display name, as shown in the GUI. Source refers to the source mof file to import.                             -->
    <!-- ################################################################################################################################# -->
    <WmiFilters>
    </WmiFilters>

    <!-- ################################################################################################################################# -->
    <!-- The <GPO> elements list the Group Policy added (or refreshed) to the target domain.                                               -->
    <!-- Each of this Group Policy is first generated with no data (if not existing), then data is imported from its backup folder.        -->
    <!--   > Name.......: refer to the display name, as shown in the GUI                                                                   -->
    <!--   > Description: description label, as shown in the GUI.                                                                          -->
    <!--   > validation.: if set to  No, the GPO is created and overwrited from its backup. Yes will also link the GPO to its targets.     -->
    <!--                                                                                                                                   -->
    <!-- The script will identify the backup source with the <GpoBackup> attribute - this one should contains {} to be functional.         -->
    <!--   > ID.........: the backup folder name for this GPO backup. The folder is located in .\Inputs\GroupPolicies.                     -->
    <!--                                                                                                                                   -->
    <!-- The <gpoDeny> ID attribute will set the specified identity with permission "Deny Execute" - you can se as many input as requiered.-->
    <!--   > ID......: use either sAMAccountName, object GUID or SID to identify the target identity to deny.                              -->
    <!--                                                                                                                                   -->
    <!-- The <gpoLink> attribute Will link the GPO to the specified target - you can use as many input as requiered.                       -->
    <!--   > Path....: DistinguishedName of the target OU where the GPO have to be linked. Use "RootDN" to refer to the DN of the domain.  -->
    <!--   > Enabled.: "Yes", "No". Teach the script to enable the link or not.                                                            -->
    <!--   > Enforced: "Yes", "No". Teach the script to enforce this stratagy to any descending GPO that normally overcome its parameters. -->
    <!--                                                                                                                                   -->
    <!-- The <GpoFilter> parameter refers to the WMI filter that should be linked to this GPO.                                             -->
    <!--   > WMI.....: the Display Name of the target WMI filter to be used (you can refer to the name section of the MOF import)          -->
    <!-- ################################################################################################################################# -->
    <!--  RESTRICT LOGIN FOR MEMBERS OF GRP_ADMIN_TIER_0 ON ANY STATIONS, EXEPT DC                                                         -->
  </GroupPolicies>
	
  <Accounts>
  <!-- ################################################################################################################################### -->
  <!-- The <Account> Section list all user identities to be generated by the script.                                                       -->
  <!-- The script first check if the account is already present in the domain (if so, nothing is done), and if not, it will generatae it.  -->
  <!-- The newly created user is then stored with its random password in a keepass file (.\Outputs\HardenAD.kbdx).                         -->
  <!-- Each account is provided with the following input:                                                                                  -->
  <!--   > GivenName.....: the given name of the account                                                                                   -->
  <!--   > Surname.......: the surname of the account                                                                                      -->
  <!--   > sAMAccountName: the sAMAccountName of the account                                                                               -->
  <!--   > displayName...: the name displayed by the GUI                                                                                   -->
  <!--   > Description...: the description of the account                                                                                  -->
  <!--   > Path..........: the distingsuihedName of the OU containing the account. you can use ROOTDN to efer to the domain DN             -->
  <!-- ################################################################################################################################### -->
  </Accounts>
  
	<Groups>
  <!-- ################################################################################################################################### -->
  <!-- The <Groups> Section list all group identities to be generated by the script.                                                       -->
  <!-- The script first check if the group is already present in the domain (if so, nothing is done), and if not, it will generatae it.    -->
  <!-- Each group is provided with the following input:                                                                                    -->
  <!--   > Name..........: the name of the group, also its display name and sAMAccountName                                                 -->
  <!--   > Description...: the description of the group                                                                                    -->
  <!--   > Scope.........: domainLocal, Local, Global or Universal                                                                         -->
  <!--   > Category......: security or distribution                                                                                        -->
  <!--                                                                                                                                     -->
  <!-- In a second time, all groups are populated with the <member> input.                                                                 -->
  <!--   > sAMAccountName: the sAMAccountName of the target member.                                                                        -->
  <!-- ################################################################################################################################### -->
  </Groups>
  
  <DefaultMembers>
  <!-- ################################################################################################################################### -->
  <!-- The <DefaultMembers> Section list strictely allowed members of a specified group.                                                   -->
  <!-- When the script call the function "Reset-GroupMembership", the function will use this data to leave only mandatory identity.        -->
  <!--   > Member: either a SID or a sAMAccountName. Use %domainSID% to dynamically replace it by the domain SID.                          -->
  <!-- ################################################################################################################################### -->
  </DefaultMembers>

  <TaskSchedules BaseDir="C:\_ADM\TasksSchedulesScripts">
  <!-- ################################################################################################################################### -->
  <!-- the <TaskSchedules> section define the sched. tasks to add to the running system and is called by the function New-ScheduleTasks.   -->
  <!-- The following parameters are expected:                                                                                              -->
  <!--   > Name......: The scheduled tasks name, as shown in the GUI.                                                                      -->
  <!--   > Xml.......: The xml file containing a backup of the new scheduled tasks and located in .\Inputs\ScheduleTasks\TasksSchedulesXml -->
  <!--   > SchedCmd..: The executable to be used. It will replace the %command% in the xml file.                                           -->
  <!--   > SchedArg..: The arguments line to pass to the executable. If a script is specified, it should present in                        -->
  <!--                 .\Inputs\ScheduleTasks\TasksSchedulesScripts                                                                        -->
  <!--   > SchedDir..: The effective path context when the schedule is run - use %BaseDir% to refer to the directory value speciefied in   -->
  <!--                 the "BaseDir" parameters of the section <TaskSchedules> (this one, yup).                                            -->
  <!--   > SchedDsc..: The description field for this task.                                                                                -->
  <!--   > SchedPth..: The folder name where the task will be stored in the Tasks Scheduler console.                                       -->
  <!-- ################################################################################################################################### -->
    <!-- flushing Sensible groups with MCS-GroupsFlushing.ps1 -->
  </TaskSchedules>
  
	<Microsoft365>
  <!-- ################################################################################################################################### -->
  <!-- the <Microsoft365> section is used to manually generated Azure AD Connect synchronisation OU (if requested).                        -->
  <!-- ################################################################################################################################### -->
  </Microsoft365>
  
	<Sequence>
  <!-- ################################################################################################################################### -->
  <!-- the <Sequence> section define the different tasks to iterate in "sequence" (can't resist to this one).                              -->
	<!-- To deal with highlight color in display, use the ` to initiate and end a color change in your string, then use one of the three     -->
  <!-- characters specified in value AltBaseHTxt(A,B, or C) to select your color: the color will switch back to normal at the next `.      -->
  <!--			                                                                                                                               -->
  <!-- The default highlight values are those one:                                                                                         -->
  <!--   > `[my text` : magenta                                                                                                            -->
  <!--   > `(my text` : yellow                                                                                                             -->
  <!--   > `{my text` : gray                                                                                                               -->
  <!--			                                                                                                                               -->
  <!-- Some special inputs are usefull to replace value dynamically :                                                                   	 -->
  <!--	 > FileName   : replace with the value of this file                                                                                -->
  <!--	 > RootDN     : replace with domain root DN                                                                                        -->
  <!--			                                                                                                                               -->
  <!-- Each task ID is executed in sequence, based on the Number vaue (ascending). Each Task ID use the following attributes:              -->			                                                                                                                               
  <!--   > Number         : Define the squence order, the lowest will be run first.                                                        --> 
  <!--   > Name           : ID task name as refered in the final log output.                                                               -->
  <!--   > CallingFunction: Name of the function to be called from one of the .psm1 files present in the modules directory.                -->
  <!--   > UseParameters  : Mandatory (but could be empty). Specify parameter to pass as argument to CallingFunction.                      -->
  <!--                      Use on per parameter and sort them in sequence (your script should refer them using input ordering).           -->
  <!--   > TaskEnabled    : YES or NO. When set to NO, the tasks is disabled and will not be applied.                                      -->
  <!-- ################################################################################################################################### -->
	</Sequence>
</Settings>

